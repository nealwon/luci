<%
-- all lua code provided by https://github.com/jow-/
-- thank you very much!

    function apply_acls(filename, session)
        local json = require "luci.jsonc"
        local util = require "luci.util"
        local fs   = require "nixio.fs"

        local grants = { }

        local acl = json.parse(fs.readfile(filename))
        if type(acl) ~= "table" then
            return
        end

        local group, perms
        for group, perms in pairs(acl) do
            local perm, scopes
            for perm, scopes in pairs(perms) do
                if type(scopes) == "table" then
                    local scope, objects
                    for scope, objects in pairs(scopes) do
                        if type(objects) == "table" then
                            if not grants[scope] then
                                grants[scope] = { }
                            end

                            if next(objects) == 1 then
                                local _, object
                                for _, object in ipairs(objects) do
                                    if not grants[scope][object] then
                                        grants[scope][object] = { }
                                    end
                                    table.insert(grants[scope][object], perm)
                                end
                            else
                                local object, funcs
                                for object, funcs in pairs(objects) do
                                    if type(funcs) == "table" then
                                        local _, func
                                        for _, func in ipairs(funcs) do
                                            if not grants[scope][object] then
                                                grants[scope][object] = { }
                                            end
                                            table.insert(grants[scope][object], func)
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end

        local _, scope, object, func
        for scope, _ in pairs(grants) do
            local objects = { }
            for object, _ in pairs(_) do
                for _, func in ipairs(_) do
                    table.insert(objects, { object, func })
                end
            end

            util.ubus("session", "grant", {
                ubus_rpc_session = session,
                scope = scope, objects = objects
            })
        end
    end

    apply_acls("/usr/share/rpcd/acl.d/attendedsysupgrade.json", luci.dispatcher.context.authsession)
    apply_acls("/usr/share/rpcd/acl.d/packagelist.json", luci.dispatcher.context.authsession)
%>
<%+header%>
<h2 name="content"><%:Attended Sysupgrade%></h2>
<div class="cbi-map-descr">
	Easily search and install new releases and package upgrades. Sysupgrade images are created on demand based on locally installed packages.
</div>
<div style="display: none" id="upgrade_info" class="alert-message info"></div>
<div style="display: none" id="upgrade_error" class="alert-message danger"></div>
<div style="display: none" id="packages" class="alert-message success"></div>
<p>
<textarea style="display: none; width: 100%;" id="edit_packages" rows="15"></textarea>
</p>
<fieldset class="cbi-section">
	<form method="post" action="">
		<div class="cbi-selection-node">
			<div class="cbi-value" id="keep_container" style="display: none">
				<div class="cbi-section-descr">
					Check "Keep settings" to retain the current configuration (requires a compatible firmware image).
				</div>
				<label class="cbi-value-title" for="keep">Keep settings:</label>
				<div class="cbi-value-field">
					<input name="keep" id="keep" checked="checked" type="checkbox">
				</div>
			</div>
			<div class="cbi-value" id="edit_button" style="display: none">
				<div class="cbi-value-field">
					<input class="cbi-button" value="Edit installed packages" onclick="edit_packages()" type="button">
				</div>
			</div>
			<div class="cbi-value cbi-value" id="server_div" style="display:none">
				<label class="cbi-value-title" for="server">Server:</label>
				<div class="cbi-value-field">
					<input onclick="edit_server()" class="cbi-button cbi-button-edit" value="" type="button" id="server" name="server">
				</div>
			</div>
			<div class="cbi-value cbi-value-last">
				<div class="cbi-value-field">
					<input class="cbi-button cbi-button-apply" value="Search for upgrades" style="display: none" onclick="upgrade_check()" type="button" id="upgrade_button">
				</div>
			</div>
		</div>
	</form>
</fieldset>
<script type="text/javascript">
data = {};
origin = document.location.href.replace(location.pathname, "")
ubus_url = origin + "/ubus/"

function set_server() {
	data.url = document.getElementById("server").value;
	ubus_call("uci", "set", { "config": "attendedsysupgrade", "section": "server", values: { "url": data.url } })
	ubus_call("uci", "commit", { "config": "attendedsysupgrade" })
	var server = document.getElementById("server")
	server.type = 'button';
	server.className = 'cbi-button cbi-button-edit';
	server.parentElement.removeChild(document.getElementById("button_set"));
	server.onclick = edit_server;
}

function edit_server() {
	document.getElementById("server").type = 'text';
	document.getElementById("server").onkeydown = function(event) {
		if(event.key === 'Enter') {
			set_server();
			return false;
		}
	}
	document.getElementById("server").className = '';
	document.getElementById("server").onclick = null;

	button_set = document.createElement("input");
	button_set.type = "button";
	button_set.value = "Save";
	button_set.name = "button_set";
	button_set.id = "button_set";
	button_set.className = 'cbi-button cbi-button-edit';
	button_set.style = 'background-image: url("/luci-static/resources/cbi/save.gif");'
	button_set.onclick = set_server
	document.getElementById("server").parentElement.appendChild(button_set);
}

function edit_packages() {
	data.edit_packages = true
	document.getElementById("edit_button").style.display = "none";
	document.getElementById("edit_packages").value = data.packages.join("\n");
	document.getElementById("edit_packages").style.display = "block";
}

// requests to the upgrade server
function server_request(request_dict, path, callback) {
	request_dict.distro = data.release.distribution;
	request_dict.target = data.release.target.split("\/")[0];
	request_dict.subtarget = data.release.target.split("\/")[1];
	var request = new XMLHttpRequest();
	request.open("POST", data.url + "/" + path, true);
	request.setRequestHeader("Content-type", "application/json");
	request.send(JSON.stringify(request_dict));
	request.onerror = function(e) {
		upgrade_error("upgrade server down")
		document.getElementById("server_div").style.display = "block";
	}
	request.addEventListener('load', function(event) {
		callback(request)
	});
}

// initial setup, get system information
function setup() {
	data["ubus_rpc_session"] = "<%=luci.dispatcher.context.authsession%>"
	ubus_call("packagelist", "list", {}, "packagelist");
	ubus_call("system", "board", {}, "release");
	ubus_call("system", "board", {}, "board_name");
	ubus_call("system", "board", {}, "model");
	uci_call({ "config": "attendedsysupgrade", "section": "server", "option": "url" })
	uci_call({ "config": "attendedsysupgrade", "section": "client", "option": "upgrade_packages" })
	uci_call({ "config": "attendedsysupgrade", "section": "client", "option": "advanced_mode" })
	uci_call({ "config": "attendedsysupgrade", "section": "client", "option": "auto_search" })
	setup_ready();
}

function setup_ready() {
	if(ubus_counter != ubus_closed) {
		setTimeout(setup_ready, 300)
	} else {
		if(data.auto_search == 1) {
			upgrade_check();
		} else {
			document.getElementById("upgrade_button").style.display = "block";
			document.getElementById("server_div").style.display = "block";
			document.getElementById("server").value = data.url;
		}
	}
}

function uci_call(option) {
	ubus_call("uci", "get", option, option["option"])
}

ubus_counter = 0;
ubus_closed = 0;
function ubus_call(command, argument, params, variable) {
	request_data = {};
	request_data.jsonrpc = "2.0";
	request_data.id = ubus_counter;
	request_data.method = "call";
	request_data.params = [ data.ubus_rpc_session, command, argument, params ]
	request_json = JSON.stringify(request_data)
	ubus_counter++;
	var request = new XMLHttpRequest();
	request.open("POST", ubus_url, true);
	request.setRequestHeader("Content-type", "application/json");
	request.addEventListener('load', function(event) {
		if(request.status === 200) {
			response = JSON.parse(request.responseText).result
			if(response[0] == 0) {
				if(response.length == 2) {
					if(command === "uci") {
						data[variable] = response[1].value
					} else {
						data[variable] = response[1][variable]
					}
				}
			} else {
				upgrade_error("ubus call faild: " + request_json)
			}
			ubus_closed++;
		}
	});
	request.send(request_json);
}

// shows notification if upgrade is available
function upgrade_info(info_output, loading) {
	document.getElementById("upgrade_info").style.display = "block";
	if(loading) {
		loading_image = '<img src="/luci-static/resources/icons/loading.gif" alt="Loading" style="vertical-align:middle">'
	} else {
		loading_image = ''
	}
	document.getElementById("upgrade_info").innerHTML = loading_image + info_output;
}

function upgrade_error(error_output) {
	document.getElementById("upgrade_error").style.display = "block";
	document.getElementById("upgrade_error").innerHTML = error_output;
	document.getElementById("upgrade_info").style.display = "none";
}

// asks server for news upgrades, actually only based on relesae not packages
function upgrade_check() {
	document.getElementById("upgrade_error").style.display = "none";
	document.getElementById("server_div").style.display = "none";
	upgrade_info("Searching for upgrades", true);
	request_dict = {}
	request_dict.version = data.release.version;
	request_dict.packages = data.packagelist;
	// not only search for new release, but for new package versions as well
	request_dict.upgrade_packages = data.upgrade_packages
	server_request(request_dict, "api/upgrade-check", upgrade_check_callback)
}

// request the image, need merge with upgrade_request
function upgrade_request() {
	console.log("upgrade_request")
	document.getElementById("upgrade_button").disabled = true;
	document.getElementById("edit_packages").style.display = "none";
	document.getElementById("edit_button").style.display = "none";
	document.getElementById("keep_container").style.display = "none";
	request_dict = {}
	request_dict.version = data.latest_version;
	request_dict.board = data.board_name

	if(data.edit_packages == true) {
		request_dict.packages = document.getElementById("edit_packages").value.split("\n")
	} else {
		request_dict.packages = data.packages;
	}
	request_dict.model = data.model
	server_request(request_dict, "api/upgrade-request", upgrade_request_callback)
}

function upgrade_request_callback(response) {
	if (response.status === 400) {
		response_content = JSON.parse(response.responseText)
		upgrade_error(response_content.error)
	} else if (response.status === 500) {
		response_content = JSON.parse(response.responseText)
		upgrade_error(response_content.error)
		if(response_content.log != undefined) {
			data.log_url = response_content.log
		}
	} else if (response.status === 503) {
		upgrade_error("please wait. server overloaded")
		// handle overload
		setTimeout(upgrade_request, 30000)
	} else if (response.status === 201) {
		response_content = JSON.parse(response.responseText)
		if(response_content.queue != undefined) {
			// in queue
			upgrade_info("please wait. you are in queue position " + response_content.queue, true)
			console.log("queued")
		} else {
			upgrade_info("imagebuilder not ready, please wait", true)
			console.log("setting up imagebuilder")
		}
		setTimeout(upgrade_request, 5000)
	} else if (response.status === 206) {
		// building
		console.log("building")
		upgrade_info("building image", true)
		setTimeout(upgrade_request, 5000)
	} else if (response.status === 200) {
		// ready to download
		response_content = JSON.parse(response.responseText);
		data.sysupgrade_url = response_content.sysupgrade;

		info_output = "Image created"
		if(data.advanced_mode == 1) {
			build_log = '</br><a target="_blank" href="' + data.sysupgrade_url + '.log">Build log</a>'
			info_output += build_log
		}
		upgrade_info(info_output);

		document.getElementById("keep_container").style.display = "block";
		var upgrade_button = document.getElementById("upgrade_button")
		upgrade_button.disabled = false;
		upgrade_button.style.display = "block";
		upgrade_button.value = "Flash firmware";
		upgrade_button.onclick = download_image;
	}
}

// uploads received blob data to the server using cgi-io
function upload_image(blob) {
	var upload_request = new XMLHttpRequest();
	var form_data  = new FormData();

	form_data.append("sessionid", data.ubus_rpc_session)
	form_data.append("filename", "/tmp/firmware.bin")
	form_data.append("filemode", 755) // insecure?
	form_data.append("filedata", blob)

	upload_request.addEventListener('load', function(event) {
		// this checksum should be parsed
		upgrade_info("Flashing firmware", true)
		ubus_call("rpc-sys", "upgrade_start", { "keep": document.getElementById("keep").checked }, 'message');
		setTimeout(ping_ubus, 5000)
		console.log(data.message);
	});

	upload_request.addEventListener('error', function(event) {
		upgrade_info("uploading failed, please retry")
	});

	upload_request.open('POST', origin + '/cgi-bin/cgi-upload');
	upload_request.send(form_data);
}

function ping_ubus() {
	var request = new XMLHttpRequest();
	request.open("GET", ubus_url, true);
	request.addEventListener('error', function(event) {
		upgrade_info("Rebooting", true);
		setTimeout(ping_ubus, 1000)
	});
	request.addEventListener('load', function(event) {
		upgrade_info("Success! Please reload web interface");
		document.getElementById("upgrade_button").value = "reload page";
		document.getElementById("upgrade_button").style.display = "block";
		document.getElementById("upgrade_button").disabled = false;
		document.getElementById("upgrade_button").onclick = function() { location.reload(); }
	});
	request.send();
}

// download image from server once the url was received by upgrade_request
function download_image() {
	console.log("download_image")
	document.getElementById("keep_container").style.display = "none";
	document.getElementById("upgrade_button").style.display = "none";
	var download_request = new XMLHttpRequest();
	download_request.open("GET", data.sysupgrade_url);
	download_request.responseType = "arraybuffer";

	download_request.onload = function () {
		if (this.status === 200) {
			var blob = new Blob([download_request.response], {type: "application/octet-stream"});
			upload_image(blob)
		}
	};
	upgrade_info("downloading image", true);
	download_request.send();
}

function upgrade_check_callback(response_object) {
	if (response_object.status === 500) {
		// python crashed
		upgrade_error("internal server error, please try again later")
		console.log("upgrade server issue")
	} else if (response_object.status === 502) {
		// python part offline
		upgrade_error("internal server error, please try again later")
		console.log("upgrade server issue")
	} else if (response_object.status === 503) {
		// handle overload
		upgrade_error("server overloaded, retry in 5 minutes")
		console.log("server overloaded")
		setTimeout(upgrade_request, 300000)
	} else if (response_object.status === 201) {
		upgrade_info("Setting up ImageBuilder", true)
		console.log("setting up imagebuilder")
		setTimeout(upgrade_request, 5000)
	} else if (response_object.status === 204) {
		// no upgrades
		upgrade_info("No upgrades available")
	} else if (response_object.status === 400) {
		// bad request
		console.log(response_object.responseText)
		response_object_content = JSON.parse(response_object.responseText)
		upgrade_error(response_object_content.error)
	} else if (response_object.status === 200) {
		// new release/upgrades
		response_content = JSON.parse(response_object.responseText)

		// create simple output to tell user whats going to be upgrade (release/packages)
		info_output = ""
		if(response_content.version != undefined) {
			info_output += "<h3>new upgrade available</h3>"
			info_output += data.release.version + " to " + response_content.version
			data.latest_version = response_content.version;
		}
		if(response_content.upgrades != undefined) {
			info_output += "<h3>package upgrades available</h3>"
			for (upgrade in response_content.upgrades) {
				info_output += "<b>" + upgrade + "</b>: " + response_content.upgrades[upgrade][1] + " to " + response_content.upgrades[upgrade][0] + "</br>"
			}
		}
		data.packages = response_content.packages
		upgrade_info(info_output)

		if(data.advanced_mode == 1) {
			document.getElementById("edit_button").style.display = "block";
		}
		var upgrade_button = document.getElementById("upgrade_button")
		upgrade_button.value = "Request image";
		upgrade_button.style.display = "block";
		upgrade_button.disabled = false;
		upgrade_button.onclick = upgrade_request;
	}
}
document.onload = setup()
</script>

<%+footer%>
